what the issue was, where it was, and if it has a proper name identified by a static analyzer

Course class

- constructor and reassign methods did not handle null String values or negative int values
- constructor initialized enrolledStudentCount to 500 instead of 0
- enrollStudent() did not check capacity
- enrollStudent() always returned false
- isCourseFull() check was incorrect
- setEnrolledStudentCount() did not check capacity for value above enrollmentCapacity
- setEnrolledStudentCount() did not check for negative values
- dropStudent() always returned false
- dropStudent() did not check if at least one student is enrolled
- getCourseLocation() returned instructorName
- getInstructorName() returned courseLocation
- no getter method for enrolledStudentCount

Department class

- constructor did not handle null String values or negative int values
- getNumberOfMajors() returned an incorrect value due to -ve sign
- getDepartmentChair() returned string "this.departmentChair" rather than actual value
- addPersonToMajor() did not account for INTEGER.MAX_VALUE
- dropPersonFromMajor did not check existing count is above zero
- addCourse() does not account for null parameters
- addCourse() comments do not specify how duplicate courseId should be handled
- toString() does not return StringBuilder result correctly

MyFileDatabase class

- departmentMapping not initialized when flag is not 0, it caused deSerializeObjectFromFile() to throw exception
- setMapping() did not handle null, it caused toString error

RouteController class

- ResponseEntity<?> return type too generic in all methods, can be String
- several methods do not change deptCode to uppercase before calling departmentMapping.get(deptCode)
- Fail case response body can be more informative in several methods (ex - changeCourseTime)
by using retrieveCourse response
- if else statement can be simplified in several methods and else removed (ex - retrieveCourse())
- retrieveDepartment() HTTP response body and status do not align
- retrieveDepartment() if else statement can be simplified to remove not statement and else
- retrieveDepartment() assumes all department codes are saved as uppercase but no other part of code ensures this
- retrieveCourse() success case returns status FORBIDDEN instead of OK
- getMajorCtFromDept() fail case returns status FORBIDDEN instead of NOT_FOUND
- getMajorCtFromDept() success case string adds negative before the count
- index() not formatted correctly
- findCourseTime() does not specify time in success response